// H√†m format s·ªë ti·ªÅn
function formatMoney(amount) {
    return new Intl.NumberFormat('vi-VN').format(Math.round(amount));
}

// H√†m format tr·ªçng l∆∞·ª£ng v√†ng (ch·ªâ -> l∆∞·ª£ng, ch·ªâ, ph√¢n)
function formatWeight(weightInChi) {
    const luong = Math.floor(weightInChi / 10);
    const chi = Math.floor(weightInChi % 10);
    const phan = Math.round((weightInChi % 1) * 10);

    let result = '';
    if (luong > 0) result += `${luong} l∆∞·ª£ng `;
    if (chi > 0) result += `${chi} ch·ªâ `;
    if (phan > 0) result += `${phan} ph√¢n`;

    return result.trim() || '0 ch·ªâ';
}

// H√†m t√≠nh to√°n quy ƒë·ªïi tr·ªçng l∆∞·ª£ng theo tu·ªïi v√†ng
function convertWeight(originalWeight, originalAge, targetAge) {
    return (originalWeight * originalAge) / targetAge;
}

// H√†m t√≠nh to√°n gi√° tr·ªã v√†ng
function calculateValue(weight, price, unit) {
    let actualPricePerChi = price;

    // Chuy·ªÉn ƒë·ªïi gi√° t·ª´ l∆∞·ª£ng sang ch·ªâ n·∫øu c·∫ßn
    if (unit === 'vnd_luong') {
        actualPricePerChi = price / 10;
    }

    return weight * actualPricePerChi * 1000; // Nh√¢n 100000 v√¨ gi√° nh·∫≠p d·∫°ng 6400 = 6.400.000
}

// H√†m t√≠nh ph·∫ßn trƒÉm ch√™nh l·ªách
function calculatePercentageDiff(newValue, originalValue) {
    return ((newValue - originalValue) / originalValue) * 100;
}

// H√†m ki·ªÉm tra ƒë·∫ßu v√†o h·ª£p l·ªá
function validateInputs() {
    const originalWeight = parseFloat(document.getElementById('originalWeight').value);
    const originalAge = parseInt(document.getElementById('originalAge').value);
    const originalPrice = parseFloat(document.getElementById('originalPrice').value);
    const newAge = parseInt(document.getElementById('newAge').value);
    const newPrice = parseFloat(document.getElementById('newPrice').value);

    return originalWeight > 0 && originalAge > 0 && originalPrice > 0 && newAge > 0 && newPrice > 0;
}

// H√†m l·∫•y ng√†y gi·ªù hi·ªán t·∫°i
function getCurrentDateTime() {
    const now = new Date();
    const date = now.toLocaleDateString('vi-VN');
    const time = now.toLocaleTimeString('vi-VN');
    return { date, time };
}

// H√†m t·∫°o phi·∫øu b√°o gi√° chi ti·∫øt v·ªõi width l·ªõn h∆°n
function createComparisonResult(originalData, convertedData) {
    const valueDiff = convertedData.value - originalData.value;
    const percentageDiff = calculatePercentageDiff(convertedData.value, originalData.value);
    const { date, time } = getCurrentDateTime();

    const isPositive = valueDiff >= 0;
    const diffColor = isPositive ? 'text-green-700' : 'text-red-700';
    const diffBg = isPositive ? 'bg-green-100' : 'bg-red-100';
    const statusText = isPositive ? 'C√ì L·ª¢I' : 'KH√îNG C√ì L·ª¢I';

    const goldPurity = {
        [originalData.age]: (originalData.age / 1000 * 100).toFixed(1),
        [convertedData.age]: (convertedData.age / 1000 * 100).toFixed(1)
    };

    const weightDiff = convertedData.weight - originalData.weight;

    return `
        <div class="h-full p-1">
            <div class="bg-white border-3 border-gray-800 w-full h-full flex flex-col" style="font-family: 'Times New Roman', serif;">
                <!-- Header compact -->
                <div class="text-center border-b-2 border-gray-800 py-1 bg-gradient-to-r from-yellow-100 to-yellow-200 flex-shrink-0">
                    <h1 class="text-lg font-bold text-gray-800">PHI·∫æU B√ÅO GI√Å V√ÄNG CHI TI·∫æT</h1>
                    <div class="text-xs text-gray-500 flex justify-center space-x-4">
                        <span>üìÖ ${date}</span>
                        <span>ÔøΩ  ${time}</span>
                    </div>
                </div>

                <!-- Main content grid -->
                <div class="grid grid-cols-4 gap-0 flex-1 overflow-hidden">
                    <!-- C·ªôt 1: V√†ng g·ªëc -->
                    <div class="border-r border-gray-800">
                        <div class="bg-gray-200 px-2 py-1 border-b border-gray-600">
                            <h3 class="text-sm font-bold text-gray-800">üìä V√ÄNG G·ªêC</h3>
                        </div>
                        <div class="p-2 space-y-2 text-xs">
                            <div class="bg-blue-50 p-2 border">
                                <div class="text-gray-600">Tr·ªçng l∆∞·ª£ng</div>
                                <div class="font-bold text-blue-700">${formatWeight(originalData.weight)}</div>
                                <div class="text-xs text-gray-500">${originalData.weight.toFixed(2)} ch·ªâ</div>
                            </div>
                            <div class="bg-purple-50 p-2 border">
                                <div class="text-gray-600">Tu·ªïi v√†ng</div>
                                <div class="font-bold text-purple-700">${originalData.age}</div>
                                <div class="text-xs text-gray-500">${goldPurity[originalData.age]}% tinh khi·∫øt</div>
                            </div>
                            <div class="bg-green-50 p-2 border">
                                <div class="text-gray-600">ƒê∆°n gi√°</div>
                                <div class="font-bold text-green-700">${formatMoney(originalData.pricePerUnit)}</div>
                                <div class="text-xs text-gray-500">VNƒê/ch·ªâ</div>
                            </div>
                            <div class="bg-yellow-50 p-2 border">
                                <div class="text-gray-600">T·ªïng gi√° tr·ªã</div>
                                <div class="font-bold text-yellow-700">${formatMoney(originalData.value)}</div>
                                <div class="text-xs text-gray-500">VNƒê</div>
                            </div>
                        </div>
                    </div>

                    <!-- C·ªôt 2: Sau quy ƒë·ªïi -->
                    <div class="border-r border-gray-800">
                        <div class="bg-orange-200 px-2 py-1 border-b border-gray-600">
                            <h3 class="text-sm font-bold text-gray-800">üîÑ SAU QUY ƒê·ªîI</h3>
                        </div>
                        <div class="p-2 space-y-2 text-xs">
                            <div class="bg-blue-50 p-2 border">
                                <div class="text-gray-600">Tr·ªçng l∆∞·ª£ng m·ªõi</div>
                                <div class="font-bold text-blue-700">${formatWeight(convertedData.weight)}</div>
                                <div class="text-xs text-gray-500">${convertedData.weight.toFixed(2)} ch·ªâ</div>
                            </div>
                            <div class="bg-purple-50 p-2 border">
                                <div class="text-gray-600">Tu·ªïi v√†ng m·ªõi</div>
                                <div class="font-bold text-purple-700">${convertedData.age}</div>
                                <div class="text-xs text-gray-500">${goldPurity[convertedData.age]}% tinh khi·∫øt</div>
                            </div>
                            <div class="bg-green-50 p-2 border">
                                <div class="text-gray-600">ƒê∆°n gi√° m·ªõi</div>
                                <div class="font-bold text-green-700">${formatMoney(convertedData.pricePerUnit)}</div>
                                <div class="text-xs text-gray-500">VNƒê/ch·ªâ</div>
                            </div>
                            <div class="bg-yellow-50 p-2 border">
                                <div class="text-gray-600">T·ªïng gi√° tr·ªã m·ªõi</div>
                                <div class="font-bold text-yellow-700">${formatMoney(convertedData.value)}</div>
                                <div class="text-xs text-gray-500">VNƒê</div>
                            </div>
                        </div>
                    </div>

                    <!-- C·ªôt 3: C√¥ng th·ª©c t√≠nh -->
                    <div class="border-r border-gray-800">
                        <div class="bg-blue-200 px-2 py-1 border-b border-gray-600">
                            <h3 class="text-sm font-bold text-gray-800">üßÆ C√îNG TH·ª®C</h3>
                        </div>
                        <div class="p-2 space-y-1 text-xs overflow-y-auto">
                            <div class="bg-white p-1 border-l-2 border-blue-500">
                                <div class="font-bold text-blue-700">1. Quy ƒë·ªïi TL:</div>
                                <div class="text-gray-700">
                                    ${originalData.weight} √ó ${originalData.age} √∑ ${convertedData.age}<br>
                                    = <strong>${convertedData.weight.toFixed(2)} ch·ªâ</strong>
                                </div>
                            </div>
                            <div class="bg-white p-1 border-l-2 border-green-500">
                                <div class="font-bold text-green-700">2. Gi√° tr·ªã g·ªëc:</div>
                                <div class="text-gray-700">
                                    ${originalData.weight} √ó ${formatMoney(originalData.pricePerUnit)}<br>
                                    = <strong>${formatMoney(originalData.value)} VNƒê</strong>
                                </div>
                            </div>
                            <div class="bg-white p-1 border-l-2 border-orange-500">
                                <div class="font-bold text-orange-700">3. Gi√° tr·ªã m·ªõi:</div>
                                <div class="text-gray-700">
                                    ${convertedData.weight.toFixed(2)} √ó ${formatMoney(convertedData.pricePerUnit)}<br>
                                    = <strong>${formatMoney(convertedData.value)} VNƒê</strong>
                                </div>
                            </div>
                            <div class="bg-white p-1 border-l-2 border-red-500">
                                <div class="font-bold text-red-700">4. Ch√™nh l·ªách:</div>
                                <div class="text-gray-700">
                                    ${formatMoney(convertedData.value)} - ${formatMoney(originalData.value)}<br>
                                    = <strong>${isPositive ? '+' : ''}${formatMoney(valueDiff)} VNƒê</strong>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- C·ªôt 4: K·∫øt qu·∫£ -->
                    <div class="${diffBg}">
                        <div class="bg-gray-800 text-white px-2 py-1 text-center">
                            <h3 class="text-sm font-bold">üìà K·∫æT QU·∫¢</h3>
                        </div>
                        <div class="p-2 text-center">
                            <div class="${diffColor} text-2xl font-bold mb-1">
                                ${isPositive ? '+' : ''}${formatMoney(valueDiff)}
                            </div>
                            <div class="${diffColor} text-sm font-bold mb-2">
                                (${isPositive ? '+' : ''}${percentageDiff.toFixed(2)}%)
                            </div>
                            
                            <div class="space-y-1 text-xs mb-2">
                                <div class="bg-white p-1 border">
                                    <div class="text-gray-600">Ch√™nh l·ªách TL</div>
                                    <div class="font-bold ${weightDiff >= 0 ? 'text-green-600' : 'text-red-600'}">
                                        ${weightDiff >= 0 ? '+' : ''}${weightDiff.toFixed(2)} ch·ªâ
                                    </div>
                                </div>
                                <div class="bg-white p-1 border">
                                    <div class="text-gray-600">Ch√™nh l·ªách gi√°</div>
                                    <div class="font-bold ${convertedData.pricePerUnit >= originalData.pricePerUnit ? 'text-green-600' : 'text-red-600'}">
                                        ${convertedData.pricePerUnit >= originalData.pricePerUnit ? '+' : ''}${formatMoney(convertedData.pricePerUnit - originalData.pricePerUnit)}
                                    </div>
                                </div>
                            </div>
                            
                            <div class="border-2 ${isPositive ? 'border-green-600' : 'border-red-600'} ${diffBg} p-2">
                                <div class="${diffColor} font-bold text-sm">
                                    üéØ ${statusText}
                                </div>
                                <div class="text-xs text-gray-700 mt-1">
                                    ${isPositive ? '‚úÖ C√≥ l·ª£i nhu·∫≠n' : '‚ö†Ô∏è S·∫Ω b·ªã l·ªó'}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Footer compact -->
                <div class="text-center py-1 border-t border-gray-800 bg-gray-50 flex-shrink-0">
                    <p class="text-xs text-gray-600">
                        üìã Phi·∫øu tham kh·∫£o - Gi√° v√†ng c√≥ th·ªÉ thay ƒë·ªïi | H·ªá th·ªëng t√≠nh to√°n chu·∫©n ng√†nh v√†ng b·∫°c
                    </p>
                </div>
            </div>
        </div>
    `;
}

// H√†m t√≠nh to√°n v√† hi·ªÉn th·ªã k·∫øt qu·∫£
function calculateConversion() {
    // Ki·ªÉm tra ƒë·∫ßu v√†o
    if (!validateInputs()) {
        document.getElementById('comparisonResult').innerHTML = `
            <div class="text-center text-gray-400 py-8">
                <p class="text-sm">Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin h·ª£p l·ªá</p>
            </div>
        `;
        return;
    }

    // L·∫•y d·ªØ li·ªáu t·ª´ form
    const originalWeight = parseFloat(document.getElementById('originalWeight').value);
    const originalAge = parseInt(document.getElementById('originalAge').value);
    const originalPrice = parseFloat(document.getElementById('originalPrice').value);
    const newAge = parseInt(document.getElementById('newAge').value);
    const newPrice = parseFloat(document.getElementById('newPrice').value);
    const priceUnit = document.getElementById('priceUnit').value;

    // T√≠nh to√°n d·ªØ li·ªáu g·ªëc
    const originalValue = calculateValue(originalWeight, originalPrice, priceUnit);
    const originalData = {
        weight: originalWeight,
        age: originalAge,
        pricePerUnit: originalPrice * 1000,
        value: originalValue
    };

    // T√≠nh to√°n d·ªØ li·ªáu sau quy ƒë·ªïi
    const convertedWeight = convertWeight(originalWeight, originalAge, newAge);
    const convertedValue = calculateValue(convertedWeight, newPrice, priceUnit);
    const convertedData = {
        weight: convertedWeight,
        age: newAge,
        pricePerUnit: newPrice * 1000,
        value: convertedValue
    };

    // T·∫°o v√† hi·ªÉn th·ªã k·∫øt qu·∫£
    const resultsContainer = document.getElementById('comparisonResult');
    resultsContainer.innerHTML = createComparisonResult(originalData, convertedData);
}

// H√†m t·ª± ƒë·ªông t√≠nh to√°n khi c√≥ thay ƒë·ªïi
function autoCalculate() {
    if (validateInputs()) {
        document.getElementById('autoCalculateStatus').classList.remove('hidden');
        calculateConversion();
    } else {
        document.getElementById('autoCalculateStatus').classList.add('hidden');
        document.getElementById('comparisonResult').innerHTML = `
            <div class="h-full flex items-center justify-center">
                <div class="text-center text-gray-400">
                    <p class="text-sm">Nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin ƒë·ªÉ xem phi·∫øu b√°o gi√°</p>
                </div>
            </div>
        `;
    }
}



// Th√™m event listener cho t·ª± ƒë·ªông t√≠nh to√°n
document.addEventListener('DOMContentLoaded', function () {
    const inputs = document.querySelectorAll('input, select');
    inputs.forEach(input => {
        input.addEventListener('input', autoCalculate);
        input.addEventListener('change', autoCalculate);
    });

    // Hi·ªÉn th·ªã tr·∫°ng th√°i ban ƒë·∫ßu
    autoCalculate();
});